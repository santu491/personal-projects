import {
  mockMongo,
  mockNFSLoader,
  mockResult,
} from '@anthem/communityapi/common/baseTest';
import { mockILogger } from '@anthem/communityapi/logger/mocks/mockILogger';
import { ImageUploadService } from '../imageUploadService';

describe('Image Upload Service', () => {
  let service: ImageUploadService;
  beforeEach(() => {
    service = new ImageUploadService(
      <any>mockResult,
      <any>mockMongo,
      <any>mockNFSLoader, <any>mockILogger
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('uploadImageBase64', async () => {
    /**
     * This test case is not working due to the atob() function which is preset in DOM but no in jest vm.
     */
    // it('success', async () => {
    //   mockMongo.readByValue.mockReturnValue({ appVersion: true, imageFilter: true });
    //   // mockNFSLoader.getNsfwModel.mockReturnValue()
    //   mockMongo.replaceByQuery.mockReturnValue(1);

    //   await service.uploadImageBase64("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", "userId");
    //   expect(mockResult.createSuccess.mock.calls.length).toBe(1);
    // });

    it('exception', async () => {
      mockMongo.readByValue.mockImplementation(() => {
        throw new Error();
      });
      mockILogger.error.mockReturnValue(1);

      await service.uploadImageBase64("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", "userId");
      expect(mockResult.createException.mock.calls.length).toBe(1);
    })
  });
});
